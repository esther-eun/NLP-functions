import re

num = {'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9, 'ten':10, 
           'eleven':11, 'twelve':12, 'thirteen':13, 'fourteen':14, 'fifteen':15, 'sixteen':16, 'seventeen':17, 
           'eighteen':18, 'nineteen':19, 'twenty':20, 'twenty one':21, 'twenty two':22, 'twenty three':23,
           'twenty four':24, 'twenty five':25, 'twenty six':26, 'twenty seven':27, 'twenty eight':28,
           'twenty nine':29, 'thirty':30, 'thirty one':31, 'thirty two':32, 'thirty three':33, 'thirty four':34,
           'thirty five':35, 'thirty six':36, 'thirty seven':37, 'thirty eight':38, 'thirty nine':39,
           'forty':40, 'forty one':41, 'forty two':42, 'forty three':43, 'forty four':44, 'forty five':45,
           'forty six':46, 'forty seven':47, 'forty eight':48, 'forty nine':49, 'fifty':50, 'fifty one':51,
           'fifty two':52, 'fifty three':53, 'fifty four':54, 'fifty five':55, 'fifty six':56, 'fifty seven':57,
           'fifty eight':58, 'fifty nine':59, 'sixty':60, 'sixty one':61, 'sixty two':62, 'sixty three':63, 
           'sixty four':64, 'sixty five':65, 'sixty six':66, 'sixty seven':67, 'sixty eight':68, 
           'sixty nine':69, 'seventy':70, 'seventy one':71, 'seventy two':72, 'seventy three':73, 
           'seventy four':74, 'seventy five':75, 'seventy six':76, 'seventy seven':77, 'seventy eight':78, 
           'seventy nine':79, 'eighty':80, 'eighty one':81, 'eighty two':82, 'eighty three':83, 
           'eighty four':84, 'eighty five':85, 'eighty six':86, 'eighty seven':87, 'eighty eight':88,
           'eighty nine':89, 'ninety':90, 'ninety one':91, 'ninety two':92, 'ninety three':93, 'ninety four':94,
           'ninety five':95, 'ninety six':96, 'ninety seven':97, 'ninety eight':98, 'ninety nine':99}



def age_extraction(text):
    # simple preprocessing
    text = re.sub('[^ a-zA-Z0-9]', '', text)
    text = re.sub('  ', '', text.lower())
        
    # find all age expressions in text
    age = (re.compile('([0-9]*|[a-z]*) *(years*|yr) *old').findall(text)) or \
        (re.compile('([0-9]*) *years* *(male|female|man|woman)').findall(text)) or \
        (re.compile('([0-9]*|[a-z]*) *(months*) *old').findall(text)) or \
        (re.compile('([0-9]*|[a-z]*) *(hours*) *old').findall(text)) or \
        (re.compile('([0-9[*|[a-z]*) *(days*) *old').findall(text))           

    # choose the first age occurrence
    if len(age)>0:
        age = list(age[0])
        if age[0] in list(num.keys()):
            age[0] = str(num[age[0]])
    else:
        age = None
               
    # years old/ months old/ hours old
    if age[1] in ['year', 'years', 'yr']:
        age[1] = 'Y'
    elif age[1] in ['month', 'months']:
        age[1] = 'M'
    elif age[1] in ['hour', 'hours']:
        age[1] = 'H'
                
    # A tuple or None will be returned
    return age
    
    
    
    
def sex_extraction(text):
    # simple preprocessing
    text = re.sub('[^ a-zA-Z0-9]', '', text)
    text = re.sub('  ', '', text.lower())
    
    # find all gender expressions
    sex = re.compile(r'\b(he|male|man|boy|she|female|woman|girl)\b').findall(text)
    
    # choose the first gender occurrence
    if sex == []:
        sex =None
    else:
        if sex[0] in ['he', 'male', 'man', 'boy']:
            sex = 'MALE'
        if sex[0] in ['she', 'female', 'woman', 'girl']:
            sex = 'FEMALE'
    
    # A string or None will be returned        
    return sex
